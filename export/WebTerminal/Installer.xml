<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2015.1.1 (Build 505U)" ts="2016-02-15 12:28:08">
<Class name="WebTerminal.Installer">
<Description>
Importing this class will install Cache WEB Terminal properly.</Description>
<Super>%Projection.AbstractProjection</Super>
<TimeChanged>63963,44872.55628</TimeChanged>
<TimeCreated>63890,71053.144208</TimeCreated>
<DependsOn>Common,Engine,Router,StaticContent,Autocomplete,Trace</DependsOn>

<Parameter name="DispatchClass">
<Default>WebTerminal.Router</Default>
</Parameter>

<Projection name="Reference">
<Type>Installer</Type>
</Projection>

<Method name="RegisterWebApplication">
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String,spec</FormalSpec>
<Implementation><![CDATA[
    set ns = $NAMESPACE
    zn:ns'="%SYS" "%SYS"
    if ('##class(Security.Applications).Exists(name)) {
        w !, "Creating WEB application """_name_"""..."
        set tSC = ##class(Security.Applications).Create(name, .spec)
        if $$$ISERR(tSC) throw ##class(%Installer.Exception).CreateFromStatus(tSC)
        w !, "WEB application """_name_""" is created."
    } else {
        do ##class(Security.Applications).Get(name, .props)
        if (props("DispatchClass") '= ..#DispatchClass) && (name = "/terminal") {
            w !, "WARNING! WEB application """_name_""" exists but does not refer to ",
                ..#DispatchClass, ".", !,
                "Please, set correct dispatch class for this application ",
                "or create a terminal WEB-application manually."
        } else {
            w !, "WEB application """_name_""" already exists, so it should be ready to use. If not - remove this application manually and recompile."
        }
    }
    zn:ns'="%SYS" ns
]]></Implementation>
</Method>

<Method name="RemoveWebApplication">
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String</FormalSpec>
<Implementation><![CDATA[
    set ns = $NAMESPACE
    zn:ns'="%SYS" "%SYS"
    if (##class(Security.Applications).Exists(name)) {
        do ##class(Security.Applications).Get(name, .props)
        if (props("DispatchClass") '= ..#DispatchClass) && (name = "/terminal") {
            w !, "Won't delete WEB-application """_name_""" because it does not refer to dispatch class anymore."
        } else {
            w !, "Deleting WEB application """_name_"""..."
            do ##class(Security.Applications).Delete(name)
            w !, "WEB application """_name_""" was successfully deleted."
        }
    }
    zn:ns'="%SYS" ns
]]></Implementation>
</Method>

<Method name="CreateProjection">
<Description>
This method is invoked when a class is compiled.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[cls:%String,&params]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    write !, "Installing WebTerminal application to " _ $NAMESPACE
    set ns = $NAMESPACE // ought to be package home namespace!
    set ^WebTerminal("HomeNamespace") = ns
    set dbdir = $$$defdir
    zn:ns'="%SYS" "%SYS"
    do ##class(Security.System).GetInstallationSecuritySetting(.security)
    set cspProperties("AutheEnabled") = 32 // password by default, 64 for no password
    set cspProperties("NameSpace") = ns // terminal works only in %SYS namespace, only in % package
    set cspProperties("Description") = "A WEB application for Cache WEB Terminal."
    set cspProperties("IsNameSpaceDefault") = 0
    set cspProperties("DispatchClass") = ..#DispatchClass
    do ..RegisterWebApplication("/terminal", .cspProperties)
    set cspProperties("AutheEnabled") = 64
    set cspProperties("Description") = "An application representing the open socket for /terminal application. Required since 2016.* Cache versions changed WebSocket behavior. PLEASE LEAVE THIS APPLICATION UNAUTHENTICATED, but do not worry: the socket won't accept anyone without the key."
    set cspProperties("DispatchClass") = ""
    set cspProperties("MatchRoles")=":%DB_CACHESYS:" _ ..GetDBRole(dbdir)
    do ..RegisterWebApplication("/terminalsocket", .cspProperties)
    set status = ##Class(Config.Namespaces).Get("%All")
    if ($$$ISERR(status)) { // no namespace %All
        w !, "Creating %All namespace..."
        set Properties("Globals") = "CACHETEMP"
        set Properties("Library") = "CACHELIB"
        set Properties("Routines") = "CACHETEMP"
        set Properties("SysGlobals") = "CACHESYS"
        set Properties("SysRoutines") = "CACHESYS"
        set Properties("TempGlobals") = "CACHETEMP"
        set status = ##Class(Config.Namespaces).Create("%All", .Properties)
        if ($$$ISERR(status)) {
            do $System.Status.DisplayError(status)
            quit status
        } else {
            w !, "%All namespace is created."
        }
    }
    w !, "Mapping %WebTerminal package into all namespaces:"
    set mapTo = $LISTBUILD("%All", "SAMPLES", "DOCBOOK")
    do ##Class(Config.Namespaces).Get("USER", .InstallNSProps)
    set Properties("Database") = $get(InstallNSProps("Routines"))
    set ptr = 0
    while $LISTNEXT(mapTo, ptr, value) {
        continue:(ns = value)
        w " ", value
        set status = ##Class(Config.MapPackages).Create(value, "WebTerminal", .Properties)
        if ($$$ISERR(status)) { do $SYSTEM.Status.DisplayError(status) }
        set status = ##Class(Config.MapGlobals).Create(value, "WebTerminal", .Properties)
        if ($$$ISERR(status)) { do $SYSTEM.Status.DisplayError(status) }
    }
    w ".", !, "Mapping complete."
    w !, "WebTerminal package successfully mapped into all namespaces."
    zn:ns'="%SYS" ns
    quit $$$OK
]]></Implementation>
</Method>

<Method name="RemoveProjection">
<Description>
This method is invoked when a class is 'uncompiled'.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[cls:%String,&params,recompile:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    write !, "Uninstalling WebTerminal application from " _ $NAMESPACE
    set ns = $NAMESPACE // has to be package home namespace!
    if ($get(^WebTerminal("HomeNamespace")) = "") {
        set msg = "Terminal home namespace is not defined! Uninstalling will be skipped."
        set msg = msg _ $Char(13,10) _ "Set ^WebTerminal(""HomeNamespace"") global equal to home namespace"
        quit $$$ERROR($$$GeneralError, msg)
    } else {
        set ns = ^WebTerminal("HomeNamespace")
    }
    zn:ns'="%SYS" "%SYS"
    do ..RemoveWebApplication("/terminal")
    do ..RemoveWebApplication("/terminalsocket")
    w !, "Unmapping %WebTerminal package from all namespaces:"
    set mapTo = $LISTBUILD("%All", "SAMPLES", "DOCBOOK")
    set ptr = 0
    while $LISTNEXT(mapTo, ptr, value) {
        continue:(ns = value)
        w " ", value
        set status = ##Class(Config.MapPackages).Delete(value, "WebTerminal")
        if ($$$ISERR(status)) { do $SYSTEM.Status.DisplayError(status) }
        set status = ##Class(Config.MapGlobals).Delete(value, "WebTerminal")
        if ($$$ISERR(status)) { do $SYSTEM.Status.DisplayError(status) }
    }
    w ".", !, "Unmapping complete."
    zn:ns'="%SYS" ns
    kill ^WebTerminal
    w !, "Global ^WebTerminal removed."
    QUIT $$$OK
]]></Implementation>
</Method>

<Method name="GetDBRole">
<ClassMethod>1</ClassMethod>
<FormalSpec>directory:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	quit:'$d(directory) ""
	new $NAMESPACE
	set $Namespace = "%SYS"
	#dim db As SYS.Database
	set db=##class(SYS.Database).%OpenId(directory)
	if $Isobject(db) {
		set resource = db.ResourceName
		set role = resource // I'm assuming that default role exists
	} else {
		set role = ""
	}
	quit role
]]></Implementation>
</Method>
</Class>
</Export>
