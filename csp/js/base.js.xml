<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="js/base.js" application="/csp/zitro/" default="1"><![CDATA[
/**
 * Basic scripts for handling events, logging, etc.
 */

var keyPressed = []; // shows if certain key is pressed on the moment. Usage: keyPressed[keyCode]

String.prototype.replaceSymbol = function (index, string) {
    return this.substr(0, index) + string + this.substr(index + 1);
};

String.prototype.reverse = function () {
    return this.split("").reverse().join("")
};

String.prototype.visualLength = function() {
    var ruler = document.getElementById("ruler");
    ruler.innerHTML = this;
    return ruler.offsetWidth;
};

/**
 * Makes any str searchable by regexp.
 *
 * @param str
 *  String.
 * @returns {XML|string|void}
 */
function escapeRegExp(str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}

/**
 * Analog of console.log() created to prevent Internet Explorer javascript error.
 */
function log() { ('console' in window)?console.log(arguments):null }

/**
 * Places caret at the end of input (editable div).
 *
 * @param input 
 *  Input.
 */
function placeCaretAtEnd(input) {

    setCaretPosition(input, input.value.length)

}

function addTextareasAutoresize() {

    var t = document.getElementsByTagName("textarea")[0];
    var offset = !window.opera?
        (t.offsetHeight - t.clientHeight):
        (t.offsetHeight + parseInt(window.getComputedStyle(t, null).getPropertyValue("border-top-width")));

    var resize  = function(t) {
        t.style.height = "auto";
        t.style.height = (t.scrollHeight  + offset ) + "px";
    };

    t.addEventListener && t.addEventListener("input", function(event) {
        resize(t);
    });

    t["attachEvent"]  && t.attachEvent("onkeyup", function() {
        resize(t);
    });

}

/**
 * Sets the cater position on element (input).
 *
 * @param element
 *  Input where to set position.
 * @param position
 *  Position to set.
 */
function setCaretPosition(element, position) {

    if(element != null) {
        if(element.createTextRange) {
            var range = element.createTextRange();
            range.move('character', position);
            range.select();
        }
        else {
            if(element.selectionStart) {
                element.focus();
                element.setSelectionRange(position, position);
            }
            else
                element.focus();
        }
    }

}

/**
 * Simply returns key code of keyPress event.
 *
 * @param event
 *  KeyPress event.
 * @returns {Number}
 *  Code of key.
 */
function getKeyCode(event) { return (window.event)?event.keyCode:event.which } // returns code of pressed key (key event)

/**
 * Function clears keyPressed status of keys. Usage: safe onblur
 */
function clearKeyStates() {

    for (var i = 0; i < 256; i++) keyPressed[i] = 0;

}
/**
 * Sets global keyPressed[keyCode] variable to 1, if key pressed, and 0, if it had released.
 *
 * @param event
 *  KeyPress event.
 */
function bodyKeyDown(event) { var c = getKeyCode(event); (c)?keyPressed[c]=1:log("Key unrecognised.") }
function bodyKeyUp(event) { var c = getKeyCode(event); (c)?keyPressed[c]=0:log("Key unrecognised.") }

/**
 * Binds event to object with callback function handler(event).
 *
 * @param object {object}
 *  Object to bind event on.
 * @param event {string}
 *  Event name.
 * @param handler {function}
 *  Function, that will handle event.
 */
function bindEvent(object, event, handler) {

    if(object.addEventListener ) {
        object.addEventListener(event,handler,false);
    } else if(object.attachEvent ) {
        var exp = (event.substr(0, 5) == "mouse") ? "" : "on"; // Internet Explorer binding
        object.attachEvent(exp+event,handler); // IE
    }

}

/**
 * Scrolling functions.
 *
 * @param object
 *  Just scrollable object.
 * @param value
 *  "Height" to scroll to.
 */
function scrollTo(object,value) { object.scrollTop = value }
function scrollToBottom(object) { scrollTo(object,object.scrollHeight) }

/**
 * Function return caret position in editable div.
 *
 * @param input
 * @returns {number}
 *  Position.
 */

function getCaretPosition(input) {
    input.focus();
    if(input.selectionStart) return input.selectionStart;
    else if(!document.selection) return 0;
    var c = "\001";
    var sel	= document.selection.createRange();
    var dul	= sel.duplicate();
    dul.moveToElementText(input);
    sel.text = c;
    var len = dul.text.indexOf(c);
    sel.moveStart('character',-1);
    sel.text = "";
    return len;
}

function getElementInnerHeight(element) {
    return element.scrollHeight;
}

function ie() {
    return navigator.appName == "Microsoft Internet Explorer"
}

/**
 * Function prevents browser default action for event.
 *
 * @param event
 */
function preventDefaultEvent(event) {
    if (event && event.preventDefault) {
        event.stopPropagation();
        event.preventDefault();
    } else {
        window.event.cancelBubble = true; // IE
    }
}

/**
 * Uses browser inbuilt HTML escape functionality to convert all symbols to html entities.
 *
 * @param string
 *  String to escape.
 *
 * @returns {string}
 *  Escaped string.
 */
function htmlEncode(string)
{
    var el = document.createElement("div");
    el.innerText = el.textContent = string;
    string = el.innerHTML;
    return string;
}

/**
 * Animates object fading in during timeout.
 *
 * @param object
 *  Object to animate.
 * @param timeout
 * [ @param value ]
 *  Value to reach between 0..1 ( default = 1 )
 * [ @param startTime ]
 *  Function-used value.
 * [ @param initialValue ]
 *  Function-used value.
 */
function animationFadeIn(object, timeout, value, startTime, initialValue) {

    if (object) {
        var speed = 20;
        log("animating",timeout,value);
        if (timeout > 0) {
            if (typeof initialValue == "undefined") initialValue = object.opacity;
            if (typeof startTime == "undefined") startTime = timeout;
            object.opacity = value + (initialValue - value)*(startTime - timeout)/startTime; // [0 -> 1]
            setTimeout("animationFadeIn(object,timeout-speed,value)",speed);
        } else {
            object.opacity = value;
        }
    }

}

function removeElement(element) {
    element.parentNode.removeChild(element);
}]]></CSP>
</Export>
