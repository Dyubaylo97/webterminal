<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="js/app.js" application="/csp/zitro/" default="1"><![CDATA[
/**
 * Basic application scripts.
 *
 * @author ZitRo
 *
 * Required:
 *  base.js
 *  terminal.js
 *  parser.js
 *  terminal.css
 *  syntax.css
 *  extra.css
 *  base.css
 *
 *  TODO:
 *      - A tons of features todo :)
 */

var webSocket = null, // socket to exchange data with server
    commandHistory = [""], // history of all submitted commands
    historyCurrent = 0; // current position in this history

var lastCommandId = -1; // Every command has it's own id. It can be used to change logs, etc.

var handleInput = 0; // while true, function terminalHandledInput(data) will be called.

var namespace = "NoNamespace"; // shows current namespace (real on server, not on client!)

var MODE_EXECUTE = 0, // executing commands on server
    MODE_SQL = 1, // executing sql queries
    MODE_MACRO = 2, // macro recording (set of commands)
    MODE_LOGIN = 3, // used while logging in
    MODE_DEFAULT = MODE_EXECUTE; // default mode

var terminalMode = MODE_EXECUTE; // mode changes current terminal submit action and behavior

var terminalCurrentOutputField; // all terminal output will be directed into this object

/**
 * Function initializing basic application components, like events, etc.
 *
 * @param authKey
 *  Default server-given parameter to access WebSocket application. 
 */
function terminalInitialize(authKey) {

    terminalCurrentOutputField = terminalGetOutputObject();
    for (var i = 0; i < 256; i++) keyPressed[i] = 0; // initializing keys
    bindEvent( document, "keydown", bodyKeyDown );
    bindEvent( document, "keyup", bodyKeyUp );
    bindEvent( document, "keydown", terminalGlobalKeyDown );
    bindEvent( terminalGetInputObject(), "click", terminalUpdateInputView );
    bindEvent( terminalGetInputObject(), "blur", clearKeyStates );
    addTextareasAutoresize();
    if (!ie()) setInterval("terminalCaretTick()",500);
    terminalSetNamespace("server");
    terminalUpdateInputView();
    terminalOutput("Terminal base ready. Type " +
        "<span class=\"warning\">/help</span> to get more information.", 0, "<b>system</b>");
    terminalServerConnect(document.URL.replace(/(\.CSP|\.csp)/,".Engine.cls").replace(/http:\/\//,"ws://"),authKey);
    removeElement(document.getElementById("startup")); // remove forever any information about authKey on pages
    terminalFocusOnInput();

}

/**
 * Connects machine to server, add handlers, etc.
 *
 * @param server
 *  URL or pair IP:PORT of server to connect to.
 *
 * @param authKey
 *  Authorization parameter.
 */
function terminalServerConnect(server, authKey) {

    var error = 0, url = (server.substr(0,5)=="ws://")?server:("ws://"+server+"/csp/sys/WebTerminal.Engine.cls");

    if (webSocket != null) {
        terminalOutput("Connection already established.", 0,"<span class=\"warning\">warning</span>");
        terminalInternalCommand_disconnect()
    }

    terminalOutput("Connecting <span class=\"info\">" + url + "</span>...", 0, "server");
    try {
        webSocket = new WebSocket(url);
    } catch (e) {
        error = 1;
    }

    if (error) {
        terminalOutput("Your browser does not support <b>WebSockets</b>. Please, update your browser.",
            0,"<span style=\"color: red\">warning</span>");
        return;
    }

    if (typeof webSocket == "undefined") {
        terminalOutput("There is a problem to create <b>WebSocket</b>. Please, check the URL and class location.",
            0,"<span style=\"color: red\">warning</span>");
    }

    webSocket.onopen = function() {
        terminalOutput("Connection established. Authorizing...", 0, "server");
        terminalSendToServer(authKey); // CTWPv2
        //terminalExecute(authKey,ACTION_AUTHORIZATION); // CTWPv1
    };

    webSocket.onclose = function(event) {

        webSocket = null;
        var t;
        if (event.wasClean) {
            t = "<span class=\"hint\">Connection closed.</span>"
        } else {
            t = "<span class=\"error\">Connection broken.</span>"
        }
        terminalOutput(t + " Code: " + event.code + ((event.reason)?"; reason: "+event.reason:"") );

    };

    webSocket.onmessage = function(event) { terminalMessageReceived(event) };

    webSocket.onerror = function(error) {
        log(error);
        terminalOutput("<span class=\"error\">error: " + error.message + "</span>",1,"server")
    };

}

/**
 * Function executes local script.
 *
 * @param string
 *  String to execute.
 */
function terminalInternalExecute(string) {

    var args = string.split(/\s*\s+\s*/g);
    var command = args.splice(0,1)[0];
    var l = args.length, argss = "";
    for (var i = 0; i < l; i++) {
        eval("var arg"+i+" = \""+args[i]+"\"");
        argss += ",arg"+i;
    }
    if (argss) argss = argss.replaceSymbol(0,"");
    try {
        log("terminalInternalCommand_"+command.toLowerCase()+"("+argss+")");
        eval("terminalInternalCommand_"+command.toLowerCase()+"("+argss+")");
    } catch (e) {
        terminalOutput("Unknown command \""+command+"\".",0,"<span class=\"warning\">system</span>")
    }

}

/**
 * Shows help.
 */
function terminalInternalCommand_help() {

    terminalOutput("<div class=\"center\"><h3>Caché Web Terminal</h3></div>" +
        "<table>" +
        "   <tr>" +
        "       <td class=\"hint\">Available client-side commands (type with slash)</td>" +
        "       <td class=\"hint\">Description</td>" +
        "   </tr>" +
        "   <tr>" +
        "       <td class=\"info\">help</td>" +
        "       <td>Shows help</td>" +
        "   </tr>" +
        "   <tr>" +
        "       <td class=\"info\">connect</td>" +
        "       <td>Establish new connection to Caché server via <b>WebSocket</b></td>" +
        "   </tr>" +
        "   <tr>" +
        "       <td class=\"info\">disconnect</td>" +
        "       <td>Disconnecting from current server</td>" +
        "   </tr>" +
        "   <tr>" +
        "       <td class=\"info\">clear</td>" +
        "       <td>Clears terminal command log. Just a visual feature</td>" +
        "   </tr>" +
        "   <tr>" +
        "       <td class=\"info\">define {definition} {redefinition}</td>" +
        "       <td>Every occurrence of {definition} will be replaced with {redefinition}</td>" +
        "   </tr>" +
        "   <tr>" +
        "       <td class=\"info\">sql</td>" +
        "       <td>Enable/disable integrated SQL shell</td>" +
        "   </tr>" +
        "</table>" +
        "<div class=\"center\"><h3>Controls</h3></div>" +
        "<table>" +
        "   <tr>" +
        "       <td class=\"hint\">Key</td>" +
        "       <td class=\"hint\">Description</td>" +
        "   </tr>" +
        "   <tr>" +
        "       <td class=\"info\">TAB</td>" +
        "       <td>Ends current input with suggested autocomplete option</td>" +
        "   </tr>" +
        "   <tr>" +
        "       <td class=\"info\">CTRL</td>" +
        "       <td>While few autocomplete option is present, changes variant of option to next available</td>" +
        "   </tr>" +
        "   <tr>" +
        "       <td class=\"info\">keys UP/DOWN</td>" +
        "       <td>Affords access to command history. <i>Current query will be saved.</i></td>" +
        "   </tr>" +
        "   <tr>" +
        "       <td class=\"info\">SHIFT/CTRL + ENTER</td>" +
        "       <td>Next line in current command stack.</td>" +
        "   </tr>"+
        "</table>"
        ,0,"<span class=\"warning\">system</span>")

}

function terminalInternalCommand_connect() {

    window.location.reload();
    terminalOutput("Authorization key lost forever. Please, reload this page.",0,"<span class=\"error\">system</span>")

}

/**
 * Just clears all logs
 */
function terminalInternalCommand_clear() { terminalClearLog() }

function terminalInternalCommand_disconnect() {

    terminalOutput("Closing connection...",0,"<span class=\"warning\">system</span>");
    webSocket.close();
    webSocket = null;

}

function terminalInternalCommand_define(definition, redefinition) {

    try {
        if (definition && redefinition) {
            terminalRedefined.push(definition);
            terminalDefines[definition] = redefinition;
            terminalOutput("\"" + definition + "\" <span class=\"hint\">defined as</span> \"" + redefinition + "\"",0,"<span class=\"hint\">system</span>");
        } else terminalOutput("Incorrect definition.",0,"<span class=\"error\">system</span>");
    } catch (e) {
        log(e);
    }

}

function terminalInternalCommand_sql() {

    terminalMode = (terminalMode != MODE_SQL)?MODE_SQL:MODE_DEFAULT;
    terminalOutput("SQL mode " + ((terminalMode == MODE_SQL)?"enabled":"disabled") + ".",
        0,"<span class=\"hint\">system</span>");
    terminalSetNamespace((terminalMode == MODE_SQL)?"SQL":namespace);

}

function terminalInternalCommand_siege(iter,msec) {

    if (typeof msec == "undefined") msec = 40;
    if (typeof iter == "undefined") iter = 100;

    handle = function(left) {
        terminalOutput("Test! Iteration " + left + "; Speed: 1/" + msec);
        if (left > 0) setTimeout("handle(" + (left-1) + ")",msec);
        scrollToBottom(document.body);
    };

    handle(iter);

}]]></CSP>
</Export>
